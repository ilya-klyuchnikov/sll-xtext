/*
* generated by Xtext
*/
package meta.sll.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import meta.sll.services.SLLGrammarAccess;

public class SLLParser extends AbstractContentAssistParser {
	
	@Inject
	private SLLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected meta.sll.ui.contentassist.antlr.internal.InternalSLLParser createParser() {
		meta.sll.ui.contentassist.antlr.internal.InternalSLLParser result = new meta.sll.ui.contentassist.antlr.internal.InternalSLLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDefinitionAccess().getAlternatives(), "rule__Definition__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getFDefinitionAccess().getGroup(), "rule__FDefinition__Group__0");
					put(grammarAccess.getFDefinitionAccess().getGroup_2(), "rule__FDefinition__Group_2__0");
					put(grammarAccess.getFDefinitionAccess().getGroup_2_1(), "rule__FDefinition__Group_2_1__0");
					put(grammarAccess.getGDefinitionAccess().getGroup(), "rule__GDefinition__Group__0");
					put(grammarAccess.getGDefinitionAccess().getGroup_2(), "rule__GDefinition__Group_2__0");
					put(grammarAccess.getGDefinitionAccess().getGroup_2_1(), "rule__GDefinition__Group_2_1__0");
					put(grammarAccess.getPatternAccess().getGroup(), "rule__Pattern__Group__0");
					put(grammarAccess.getPatternAccess().getGroup_2(), "rule__Pattern__Group_2__0");
					put(grammarAccess.getPatternAccess().getGroup_2_1(), "rule__Pattern__Group_2_1__0");
					put(grammarAccess.getFCallAccess().getGroup(), "rule__FCall__Group__0");
					put(grammarAccess.getFCallAccess().getGroup_2(), "rule__FCall__Group_2__0");
					put(grammarAccess.getFCallAccess().getGroup_2_1(), "rule__FCall__Group_2_1__0");
					put(grammarAccess.getGCallAccess().getGroup(), "rule__GCall__Group__0");
					put(grammarAccess.getGCallAccess().getGroup_2(), "rule__GCall__Group_2__0");
					put(grammarAccess.getGCallAccess().getGroup_2_1(), "rule__GCall__Group_2_1__0");
					put(grammarAccess.getCtrAccess().getGroup(), "rule__Ctr__Group__0");
					put(grammarAccess.getCtrAccess().getGroup_2(), "rule__Ctr__Group_2__0");
					put(grammarAccess.getCtrAccess().getGroup_2_1(), "rule__Ctr__Group_2_1__0");
					put(grammarAccess.getProgramAccess().getDefsAssignment(), "rule__Program__DefsAssignment");
					put(grammarAccess.getFDefinitionAccess().getNameAssignment_0(), "rule__FDefinition__NameAssignment_0");
					put(grammarAccess.getFDefinitionAccess().getParamsAssignment_2_0(), "rule__FDefinition__ParamsAssignment_2_0");
					put(grammarAccess.getFDefinitionAccess().getParamsAssignment_2_1_1(), "rule__FDefinition__ParamsAssignment_2_1_1");
					put(grammarAccess.getFDefinitionAccess().getBodyAssignment_5(), "rule__FDefinition__BodyAssignment_5");
					put(grammarAccess.getGDefinitionAccess().getNameAssignment_0(), "rule__GDefinition__NameAssignment_0");
					put(grammarAccess.getGDefinitionAccess().getPatternAssignment_2_0(), "rule__GDefinition__PatternAssignment_2_0");
					put(grammarAccess.getGDefinitionAccess().getParamsAssignment_2_1_1(), "rule__GDefinition__ParamsAssignment_2_1_1");
					put(grammarAccess.getGDefinitionAccess().getBodyAssignment_5(), "rule__GDefinition__BodyAssignment_5");
					put(grammarAccess.getPatternAccess().getNameAssignment_0(), "rule__Pattern__NameAssignment_0");
					put(grammarAccess.getPatternAccess().getArgsAssignment_2_0(), "rule__Pattern__ArgsAssignment_2_0");
					put(grammarAccess.getPatternAccess().getArgsAssignment_2_1_1(), "rule__Pattern__ArgsAssignment_2_1_1");
					put(grammarAccess.getFCallAccess().getNameAssignment_0(), "rule__FCall__NameAssignment_0");
					put(grammarAccess.getFCallAccess().getArgsAssignment_2_0(), "rule__FCall__ArgsAssignment_2_0");
					put(grammarAccess.getFCallAccess().getArgsAssignment_2_1_1(), "rule__FCall__ArgsAssignment_2_1_1");
					put(grammarAccess.getGCallAccess().getNameAssignment_0(), "rule__GCall__NameAssignment_0");
					put(grammarAccess.getGCallAccess().getArgsAssignment_2_0(), "rule__GCall__ArgsAssignment_2_0");
					put(grammarAccess.getGCallAccess().getArgsAssignment_2_1_1(), "rule__GCall__ArgsAssignment_2_1_1");
					put(grammarAccess.getCtrAccess().getNameAssignment_0(), "rule__Ctr__NameAssignment_0");
					put(grammarAccess.getCtrAccess().getArgsAssignment_2_0(), "rule__Ctr__ArgsAssignment_2_0");
					put(grammarAccess.getCtrAccess().getArgsAssignment_2_1_1(), "rule__Ctr__ArgsAssignment_2_1_1");
					put(grammarAccess.getVarAccess().getNameAssignment(), "rule__Var__NameAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			meta.sll.ui.contentassist.antlr.internal.InternalSLLParser typedParser = (meta.sll.ui.contentassist.antlr.internal.InternalSLLParser) parser;
			typedParser.entryRuleProgram();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SLLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SLLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
